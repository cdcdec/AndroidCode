apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
def Properties props = new Properties()
props.load(new FileInputStream(file("signing.properties")))
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId "com.cdc.androidcode"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        /*ndk {
            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "armeabi", "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }*/

        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "d44807982507617679d47adb", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file(props['KEYSTORE_FILE'])
            storePassword props['KEYSTORE_PASSWORD']
            keyAlias props['KEYSTORE_ALIAS']
            keyPassword props['KEY_PASSWORD']
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.release
            debuggable true
        }
    }



    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']

//            res.srcDirs = [
//                    'src/main/res/layout',
//                    'src/main/res'
//            ]
        }
    }

    dataBinding {
        enabled = true
    }
}



dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //内存泄漏检测
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    debugImplementation rootProject.ext.dependencies.leakcanaryAndroid
    releaseImplementation rootProject.ext.dependencies.leakcanaryAndroidNoOp
    // Optional, if you use support library fragments:
    debugImplementation rootProject.ext.dependencies.leakcanarySupportFragment
    //内存泄漏检测
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.dependencies.appcompatV7
    implementation rootProject.ext.dependencies.constraintLayout
    implementation rootProject.ext.dependencies.FlycoTabLayoutLib
    implementation rootProject.ext.dependencies.orhanobutLogger
    implementation rootProject.ext.dependencies.SuperTextView
    implementation rootProject.ext.dependencies.glide
    implementation rootProject.ext.dependencies.xxpermissions
    //极光1
    implementation rootProject.ext.dependencies.jpush
    //极光2
    implementation rootProject.ext.dependencies.jpushjcore
    implementation rootProject.ext.dependencies.AppUpdateDialog
    kapt rootProject.ext.dependencies.glideAnnotationProcessor
    //annotationProcessor rootProject.ext.dependencies.glideAnnotationProcessor
    implementation rootProject.ext.dependencies.picasso
    implementation rootProject.ext.dependencies.rvadapter
    implementation rootProject.ext.dependencies.design
    implementation rootProject.ext.dependencies.immersionbar
    implementation rootProject.ext.dependencies.SmartRefreshLayout
    implementation rootProject.ext.dependencies.BaseRecyclerViewAdapterHelper
    implementation rootProject.ext.dependencies.multidex
    implementation project(':baserecyclerviewadapterhelper')
    implementation project(':recyclerviewflexibledivide')
    implementation project(':mapsearchlocation')
    implementation project(':toasty')
}
